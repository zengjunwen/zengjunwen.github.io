"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7657],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>d});var r=t(7294);function s(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){s(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,s=function(n,e){if(null==n)return{};var t,r,s={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(s[t]=n[t]);return s}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(s[t]=n[t])}return s}var o=r.createContext({}),u=function(n){var e=r.useContext(o),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},c=function(n){var e=u(n.components);return r.createElement(o.Provider,{value:e},n.children)},p="mdxType",g={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,s=n.mdxType,a=n.originalType,o=n.parentName,c=l(n,["components","mdxType","originalType","parentName"]),p=u(t),m=s,d=p["".concat(o,".").concat(m)]||p[m]||g[m]||a;return t?r.createElement(d,i(i({ref:e},c),{},{components:t})):r.createElement(d,i({ref:e},c))}));function d(n,e){var t=arguments,s=e&&e.mdxType;if("string"==typeof n||s){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var o in e)hasOwnProperty.call(e,o)&&(l[o]=e[o]);l.originalType=n,l[p]="string"==typeof n?n:s,i[1]=l;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1092:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=t(7462),s=(t(7294),t(3905));const a={},i=void 0,l={permalink:"/blog/code/moego",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/code/moego.md",source:"@site/blog/code/moego.md",title:"code/moego",description:"\u4efb\u52a1\u8c03\u5ea6",date:"2024-01-14T11:57:27.657Z",formattedDate:"January 14, 2024",tags:[],readingTime:3.43,hasTruncateMarker:!1,authors:[],frontMatter:{},nextItem:{title:"2023-08-28 ARTS",permalink:"/blog/2023-08-28 ARTS"}},o={authorsImageUrls:[]},u=[{value:"\u4efb\u52a1\u8c03\u5ea6",id:"\u4efb\u52a1\u8c03\u5ea6",level:3},{value:"\u5c06\u6570\u5b57\u8868\u8ff0\u4e3a\u4e2d\u6587\u8868\u8fbe\u3002",id:"\u5c06\u6570\u5b57\u8868\u8ff0\u4e3a\u4e2d\u6587\u8868\u8fbe",level:3}],c={toc:u},p="wrapper";function g(n){let{components:e,...t}=n;return(0,s.kt)(p,(0,r.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h3",{id:"\u4efb\u52a1\u8c03\u5ea6"},"\u4efb\u52a1\u8c03\u5ea6"),(0,s.kt)("p",null,"\u8f93\u5165\u4e3a\u4efb\u52a1\u5217\u8868\u548c\u4e8c\u5143\u5217\u8868\uff0c\u8f93\u51fa\u4e3a\u4efb\u52a1\u7684\u6267\u884c\u987a\u5e8f\u3002\u4f8b\u5982\uff1a\n\u8f93\u5165\uff1a",'["A", "B", "C", "D"]',"\uff0c[",'["A", "C"]',", ",'["C", "B"]',", ",'["D", "A"]',"]\uff0c\u8f93\u51fa\uff1a",'["B", "C", "A", "D"]'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "reflect"\n)\n\nfunc orchestrate(tasks []string, dependencies [][]string) (result []string, isDAG bool) {\n    // step 1: init task graph and task degree dict\n    taskGraph := make(map[string][]string)\n    taskDegree := make(map[string]uint)\n    for _, task := range tasks {\n        taskDegree[task] = 0\n        taskGraph[task] = []string{}\n    }\n    for _, dep := range dependencies {\n        childTask, parentTask := dep[0], dep[1]\n        taskGraph[parentTask] = append(taskGraph[parentTask], childTask)\n        taskDegree[childTask]++\n    }\n\n    // step 2: init task queue for BFS\n    var taskQueue []string\n    for _, task := range tasks {\n        if taskDegree[task] == 0 {\n            result = append(result, task)\n            taskQueue = append(taskQueue, task)\n        }\n    }\n\n    // step 3: pop element form taskQueue and BFS that will add new element to taskQueue\n    cnt := 0\n    for len(taskQueue) > 0 {\n        task := taskQueue[0]\n        taskQueue = taskQueue[1:]\n        cnt++\n        for _, child := range taskGraph[task] {\n            taskDegree[child]--\n            if taskDegree[child] == 0 {\n                taskQueue = append(taskQueue, child)\n                result = append(result, child)\n            }\n        }\n    }\n\n    return result, cnt == len(tasks)\n}\n\nfunc test(tasks []string, dependencies [][]string, expected []string) {\n    result, _ := orchestrate(tasks, dependencies)\n    if !reflect.DeepEqual(result, expected) {\n        panic(fmt.Sprintf("Expected %v but got %v", expected, result))\n    }\n}\n\nfunc main() {\n    test(\n        []string{"A", "B", "C", "D"},\n        [][]string{{"A", "C"}, {"C", "B"}, {"D", "A"}},\n        []string{"B", "C", "A", "D"},\n    )\n    test(\n        []string{"A", "B", "C"},\n        [][]string{{"B", "A"}, {"A", "C"}},\n        []string{"C", "A", "B"},\n    )\n    test(\n        []string{"A", "B", "C"},\n        [][]string{{"C", "A"}, {"B", "A"}, {"B", "C"}},\n        []string{"A", "C", "B"},\n    )\n    test(\n        []string{"A", "B", "C"},\n        [][]string{{"C", "A"}, {"B", "C"}, {"B", "A"}},\n        []string{"A", "C", "B"},\n    )\n    fmt.Println("PASSED!")\n}\n')),(0,s.kt)("h3",{id:"\u5c06\u6570\u5b57\u8868\u8ff0\u4e3a\u4e2d\u6587\u8868\u8fbe"},"\u5c06\u6570\u5b57\u8868\u8ff0\u4e3a\u4e2d\u6587\u8868\u8fbe\u3002"),(0,s.kt)("p",null,'\u4f8b\u5982\uff1a\n1000\u4e2d\u6587\u8868\u8fbe\u4e3a "\u4e00\u5343",\n1234_5678_9098_7654\u4e2d\u6587\u8868\u8fbe\u4e3a"\u4e00\u5343\u4e8c\u767e\u4e09\u5341\u56db\u4e07\u4e94\u5343\u516d\u767e\u4e03\u5341\u516b\u4ebf\u4e5d\u5343\u96f6\u4e5d\u5341\u516b\u4e07\u4e03\u5343\u516d\u767e\u4e94\u5341\u56db",\n1000_0000_0000_0002\u4e2d\u6587\u8868\u8fbe\u4e3a"\u4e00\u5343\u4e07\u4ebf\u96f6\u4e8c"'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "strconv"\n\nvar ChineseDigits = [...]string{"\u96f6", "\u4e00", "\u4e8c", "\u4e09", "\u56db", "\u4e94", "\u516d", "\u4e03", "\u516b", "\u4e5d"}\nvar SmallUnit = [...]string{"", "\u5341", "\u767e", "\u5343"}\nvar BigUnit = [...]string{"", "\u4e07", "\u4ebf"}\n\n// ChineseNumber we use "+" to concat string. we should use strings.Builder when need efficient\nfunc ChineseNumber(num int64) string {\n    result := parseBigUnit(num)\n\n    return result\n}\n\nfunc parseBigUnit(num int64) string {\n    var bigUnitPos = 0\n    var cleanZero = false\n    var result string\n\n    // parse big unit\n    for num > 0 {\n        section := num % 10000\n        num /= 10000\n\n        var smallUnitStr string\n        smallUnitStr, cleanZero = parseSmallUnit(int(section))\n\n        if len(smallUnitStr) > 0 || bigUnitPos == 2 {\n            result = smallUnitStr + BigUnit[bigUnitPos] + result\n        }\n\n        bigUnitPos++\n        if bigUnitPos%3 == 0 {\n            bigUnitPos = 1\n        }\n    }\n\n    // clean zero\n    if cleanZero {\n        result = result[1:]\n    }\n    return result\n}\n\nfunc parseSmallUnit(num int) (result string, zeroPre bool) {\n    smallUnitPos := 0\n    cnt := 0\n\n    // parse small unit\n    for num > 0 {\n        cnt++\n        digit := num % 10\n        if digit > 0 {\n            result = ChineseDigits[digit] + SmallUnit[smallUnitPos] + result\n            zeroPre = false\n        } else {\n            if !zeroPre && len(result) > 0 {\n                result = ChineseDigits[digit] + result\n                zeroPre = true\n            }\n        }\n        num /= 10\n        smallUnitPos++\n    }\n\n    // add zero\n    if 0 < cnt && cnt < 3 {\n        result = ChineseDigits[0] + result\n        zeroPre = true\n    }\n\n    return result, zeroPre\n}\n\nfunc main() {\n    cases := map[int64]string{\n        1000:                "\u4e00\u5343",\n        1234_5678_9098_7654: "\u4e00\u5343\u4e8c\u767e\u4e09\u5341\u56db\u4e07\u4e94\u5343\u516d\u767e\u4e03\u5341\u516b\u4ebf\u4e5d\u5343\u96f6\u4e5d\u5341\u516b\u4e07\u4e03\u5343\u516d\u767e\u4e94\u5341\u56db",\n        1000_0000_0000_0002: "\u4e00\u5343\u4e07\u4ebf\u96f6\u4e8c",\n    }\n    for k, v := range cases {\n        str := ChineseNumber(k)\n        if v != str {\n            panic("expected value for " + strconv.Itoa(int(k)) + " was " + v + ", but got " + str)\n        }\n    }\n    println("PASSED!")\n}\n')))}g.isMDXComponent=!0}}]);